/*
 * CONF
 * Quality-Critical Manager allows application developers to plan a customized virtual infrastructure based on application level constraints on QoS and resource budgets, provisioning the virtual infrastructure, deploy application components onto the virtual infrastructure, and start execution on demand using TOSCA.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: z.zhao@uva.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CloudCredentialDB', 'model/CloudsStormTopTopology', 'model/CloudsStormVMs', 'model/Credential', 'model/CredentialInfo', 'model/DB', 'model/DBInfo', 'model/DCMetaInfo', 'model/NodeTemplate', 'model/NodeTemplateMap', 'model/Provisioner', 'model/TopologyTemplate', 'model/ToscaTemplate', 'model/User', 'model/VMMetaInfo', 'api/DefaultApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/CloudCredentialDB'), require('./model/CloudsStormTopTopology'), require('./model/CloudsStormVMs'), require('./model/Credential'), require('./model/CredentialInfo'), require('./model/DB'), require('./model/DBInfo'), require('./model/DCMetaInfo'), require('./model/NodeTemplate'), require('./model/NodeTemplateMap'), require('./model/Provisioner'), require('./model/TopologyTemplate'), require('./model/ToscaTemplate'), require('./model/User'), require('./model/VMMetaInfo'), require('./api/DefaultApi'), require('./api/UserApi'));
  }
}(function(ApiClient, CloudCredentialDB, CloudsStormTopTopology, CloudsStormVMs, Credential, CredentialInfo, DB, DBInfo, DCMetaInfo, NodeTemplate, NodeTemplateMap, Provisioner, TopologyTemplate, ToscaTemplate, User, VMMetaInfo, DefaultApi, UserApi) {
  'use strict';

  /**
   * Quality_Critical_Manager_allows_application_developers_to_plan_a_customized_virtual_infrastructure_based_on_application_level_constraints_on_QoS_and_resource_budgets_provisioning_the_virtual_infrastructure_deploy_application_components_onto_the_virtual_infrastructure_and_start_execution_on_demand_using_TOSCA_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Conf = require('index'); // See note below*.
   * var xxxSvc = new Conf.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Conf.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Conf.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Conf.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 3.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The CloudCredentialDB model constructor.
     * @property {module:model/CloudCredentialDB}
     */
    CloudCredentialDB: CloudCredentialDB,
    /**
     * The CloudsStormTopTopology model constructor.
     * @property {module:model/CloudsStormTopTopology}
     */
    CloudsStormTopTopology: CloudsStormTopTopology,
    /**
     * The CloudsStormVMs model constructor.
     * @property {module:model/CloudsStormVMs}
     */
    CloudsStormVMs: CloudsStormVMs,
    /**
     * The Credential model constructor.
     * @property {module:model/Credential}
     */
    Credential: Credential,
    /**
     * The CredentialInfo model constructor.
     * @property {module:model/CredentialInfo}
     */
    CredentialInfo: CredentialInfo,
    /**
     * The DB model constructor.
     * @property {module:model/DB}
     */
    DB: DB,
    /**
     * The DBInfo model constructor.
     * @property {module:model/DBInfo}
     */
    DBInfo: DBInfo,
    /**
     * The DCMetaInfo model constructor.
     * @property {module:model/DCMetaInfo}
     */
    DCMetaInfo: DCMetaInfo,
    /**
     * The NodeTemplate model constructor.
     * @property {module:model/NodeTemplate}
     */
    NodeTemplate: NodeTemplate,
    /**
     * The NodeTemplateMap model constructor.
     * @property {module:model/NodeTemplateMap}
     */
    NodeTemplateMap: NodeTemplateMap,
    /**
     * The Provisioner model constructor.
     * @property {module:model/Provisioner}
     */
    Provisioner: Provisioner,
    /**
     * The TopologyTemplate model constructor.
     * @property {module:model/TopologyTemplate}
     */
    TopologyTemplate: TopologyTemplate,
    /**
     * The ToscaTemplate model constructor.
     * @property {module:model/ToscaTemplate}
     */
    ToscaTemplate: ToscaTemplate,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The VMMetaInfo model constructor.
     * @property {module:model/VMMetaInfo}
     */
    VMMetaInfo: VMMetaInfo,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
