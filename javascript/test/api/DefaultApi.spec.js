/*
 * CONF
 * Quality-Critical Manager allows application developers to plan a customized virtual infrastructure based on application level constraints on QoS and resource budgets, provisioning the virtual infrastructure, deploy application components onto the virtual infrastructure, and start execution on demand using TOSCA.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: z.zhao@uva.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Conf);
  }
}(this, function(expect, Conf) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Conf.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('createCredentials', function() {
        it('should call createCredentials successfully', function(done) {
          // TODO: uncomment, update parameter values for createCredentials call and complete the assertions
          /*
          var body = new Conf.Credential();

          instance.createCredentials(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUser', function() {
        it('should call createUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createUser call and complete the assertions
          /*
          var body = new Conf.User();

          instance.createUser(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteToscaTemplateByID', function() {
        it('should call deleteToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.nodeNames = ["nodeNames_example"];

          instance.deleteToscaTemplateByID(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deployProvisionToscaTemplateByID', function() {
        it('should call deployProvisionToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for deployProvisionToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";

          instance.deployProvisionToscaTemplateByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCredentialIDs', function() {
        it('should call getCredentialIDs successfully', function(done) {
          // TODO: uncomment getCredentialIDs call and complete the assertions
          /*

          instance.getCredentialIDs(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getToscaTemplateByID', function() {
        it('should call getToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getToscaTemplateByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getToscaTemplateIDs', function() {
        it('should call getToscaTemplateIDs successfully', function(done) {
          // TODO: uncomment getToscaTemplateIDs call and complete the assertions
          /*

          instance.getToscaTemplateIDs(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('planToscaTemplateByID', function() {
        it('should call planToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for planToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";

          instance.planToscaTemplateByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('provisionPlanToscaTemplateByID', function() {
        it('should call provisionPlanToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for provisionPlanToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";

          instance.provisionPlanToscaTemplateByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scaleProvisionedToscaTemplateByID', function() {
        it('should call scaleProvisionedToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for scaleProvisionedToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";
          var nodeName = "nodeName_example";
          var nodeNum = 56;

          instance.scaleProvisionedToscaTemplateByID(id, nodeName, nodeNum, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateToscaTemplateByID', function() {
        it('should call updateToscaTemplateByID successfully', function(done) {
          // TODO: uncomment, update parameter values for updateToscaTemplateByID call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.file = "/path/to/file.txt";

          instance.updateToscaTemplateByID(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadToscaTemplate', function() {
        it('should call uploadToscaTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadToscaTemplate call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.uploadToscaTemplate(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userLogoutGet', function() {
        it('should call userLogoutGet successfully', function(done) {
          // TODO: uncomment userLogoutGet call
          /*

          instance.userLogoutGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userUsernameDelete', function() {
        it('should call userUsernameDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for userUsernameDelete call
          /*
          var username = "username_example";

          instance.userUsernameDelete(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userUsernameGet', function() {
        it('should call userUsernameGet successfully', function(done) {
          // TODO: uncomment, update parameter values for userUsernameGet call and complete the assertions
          /*
          var username = "username_example";

          instance.userUsernameGet(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Conf.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
